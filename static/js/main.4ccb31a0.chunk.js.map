{"version":3,"sources":["constants.tsx","reducers.tsx","reportWebVitals.js","components/Header.tsx","components/SearchBox/SearchBox.tsx","components/Scroll/Scroll.tsx","components/ErrorBoundry.tsx","components/card/Card.tsx","components/CardList/CardList.tsx","components/MainPage/MainPage.tsx","containers/App/App.tsx","actions.tsx","serviceWorkerRegistration.js","index.tsx"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","className","React","memo","SearchBox","searchChange","aria-label","type","onChange","placeholder","Scroll","children","style","overflowY","border","height","ErrorBoundry","props","state","hasError","errorInfo","this","setState","Component","Card","id","name","email","src","alt","CardList","map","robot","MainPage","App","robosUsers","useSelector","requestRobots","text","searchRobots","dispatch","useDispatch","useState","searchResults","setSearchResults","useEffect","fetch","response","json","data","payload","catch","filteredRobots","length","filter","toLowerCase","includes","e","setSearchField","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunkMiddleware","rootReducer","combineReducers","action","Object","assign","store","createStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"qOAAaA,EAAsB,sBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCQ/BC,EAAmC,CACrCC,YAAa,IAuBXC,EAAoC,CACtCC,WAAW,EACXC,OAAQ,GACRC,MAAO,IC3BIC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,QCJRQ,EAAmB,WAErB,OACI,oBAAIC,UAAU,KAAd,0BAIOC,MAAMC,KAAKH,GCNpBI,EAAsD,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAC1D,OACI,qBAAKJ,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACVK,aAAW,gBACXC,KAAK,SACLC,SAAUH,EACVI,YAAY,sBAMhBP,MAAMC,KAAKC,GCDXM,EAVwB,SAAC,GAAe,IAAdC,EAAa,EAAbA,SAErC,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,K,gCCyBEK,E,kDAvBX,WAAYC,GAAmB,IAAD,8BAC1B,cAAMA,IAEDC,MAAQ,CACTC,UAAU,GAJY,E,8DAQZ7B,EAAc8B,GAC5BC,KAAKC,SAAS,CACVH,UAAU,M,+BAMd,OAAOE,KAAKH,MAAMC,SACd,8DACAE,KAAKJ,MAAMN,a,GApBIY,aCPrBC,EAAyB,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAEvC,OACI,sBAAK1B,UAAU,sDAAf,UACI,qBAAK2B,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAI,UACzD,gCACI,6BAAKH,IACL,4BAAIC,WAOLzB,MAAMC,KAAKqB,GCCXM,EAbkC,SAAC,GAAc,IAAbzC,EAAY,EAAZA,OAE/C,OACI,mCAEQA,EAAO0C,KAAI,SAACC,GAAD,OAAmB,cAAC,EAAD,CAAqBP,GAAIO,EAAMP,GAAIC,KAAMM,EAAMN,KAAMC,MAAOK,EAAML,OAAvDK,EAAMP,UCsBhDQ,G,MAhBqB,SAAChB,GAEjC,OACI,sBAAKhB,UAAU,KAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWI,aAAeY,EAAMZ,eAChC,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUhB,OAAS4B,EAAM5B,kBCkE9B6C,EAnCQ,WAEnB,IAAMC,EAAuBC,aAAY,SAAClB,GAAD,OAAqBA,EAAMmB,cAAchD,UAC5ED,EAAYgD,aAAY,SAAClB,GAAD,OAAqBA,EAAMmB,cAAcjD,aACjEkD,EAAOF,aAAY,SAAClB,GAAD,OAAqBA,EAAMqB,aAAarD,eAC3DsD,EAA4BC,cALT,EAMiBC,mBAAmB,IANpC,mBAMlBC,EANkB,KAMHC,EANG,KA2BzB,OAbAC,qBAAU,WACNL,GCzD2B,SAACA,GAChCA,EAAS,CAACjC,KAAMzB,IAChBgE,MAAM,8CACDpD,MAAK,SAAAqD,GAAQ,OAAIA,EAASC,UAC1BtD,MAAK,SAAAuD,GAAI,OAAIT,EAAS,CAACjC,KAAMxB,EAAwBmE,QAASD,OAC9DE,OAAM,SAAA7D,GAAK,OAAIkD,EAAS,CAACjC,KAAMvB,EAAuBkE,QAAQ5D,YDqDhE,CAACkD,IAEJK,qBAAU,WAEN,IAAMO,EAA2BjB,EAAWkB,OACxClB,EAAWmB,QAAO,SAACtB,GAAD,OAAmBA,EAAMN,KAAK6B,cAAcC,SAASlB,EAAKiB,kBAC5E,GAEJX,EAAiBQ,KAClB,CAACd,EAAMH,IAEN/C,IAAcuD,EACN,4CAIR,cAAC,EAAD,CAAUtC,aAtBS,SAACoD,GACpBjB,EC1DsB,SAACF,GAAD,MAAmB,CAC7C/B,KAAM1B,EACNqE,QAASZ,GDwDIoB,CAAeD,EAAEE,OAAOC,SAqBOvE,OAAQsD,KE3ElDkB,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1E,MAAK,SAAC+E,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzD,QACfoD,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BtB,OAAM,SAAC7D,GACNyF,QAAQzF,MAAM,4CAA6CA,MC3EjE,IAAM6F,EAASC,yBAGTC,GAFmBtB,OAAOuB,sCAAwCC,KAGpEC,YAAgBC,IAAiBN,IAM/BO,EAAcC,YAAgB,CAACpD,aZRT,WAA2E,IAA1ErB,EAAyE,uDAAnDjC,EAAoB2G,EAA+B,uDAAP,GAC3F,OAAQA,EAAOrF,MACX,KAAK1B,EACD,OAAOgH,OAAOC,OAAO,GAAI5E,EAAO,CAAChC,YAAa0G,EAAO1C,UACzD,QACI,OAAOhC,IYG+BmB,cZkBrB,WAA6E,IAA5EnB,EAA2E,uDAApD/B,EAAoByG,EAAgC,uDAAP,GAC9F,OAAQA,EAAOrF,MACX,KAAKzB,EACD,OAAO+G,OAAOC,OAAO,GAAI5E,EAAO,CAAC9B,WAAW,IAChD,KAAKL,EACD,OAAO8G,OAAOC,OAAO,GAAI5E,EAAO,CAAC9B,WAAW,EAAOC,OAAQuG,EAAO1C,UACtE,KAAKlE,EACD,OAAO6G,OAAOC,OAAO,GAAI5E,EAAO,CAAC9B,WAAW,EAAOE,MAAOsG,EAAO1C,UACrE,QACI,OAAOhC,MY1Bb6E,EAAQC,YAAYN,EAAaL,GAEvCY,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRK,SAASC,eAAe,SDlBrB,SAAkBhC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgC,IAAIC,qBAAwBxC,OAAOC,SAASwC,MACpDC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,QAAQ,WAC9B,IAAMtC,EAAK,UAAMmC,qBAAN,sBAEP1C,IAgEV,SAAiCO,EAAOC,GAEtCvB,MAAMsB,EAAO,CACXuC,QAAS,CAAE,iBAAkB,YAE5BjH,MAAK,SAACqD,GAEL,IAAM6D,EAAc7D,EAAS4D,QAAQE,IAAI,gBAEnB,MAApB9D,EAAS+D,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMtH,MAAK,SAAC+E,GAClCA,EAAawC,aAAavH,MAAK,WAC7BqE,OAAOC,SAASkD,eAKpB/C,EAAgBC,EAAOC,MAG1BlB,OAAM,WACL4B,QAAQC,IAAI,oEAtFVmC,CAAwB/C,EAAOC,GAI/BC,UAAUC,cAAcyC,MAAMtH,MAAK,WACjCqF,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,OCJ/B+C,GAMA7H,M","file":"static/js/main.4ccb31a0.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING\r\n} from './constants'\r\nimport {IRobot} from \"./containers/App/App\";\r\n\r\n\r\ninterface ISearchState {\r\n    searchField: string\r\n}\r\n\r\nconst initialStateSearch: ISearchState = {\r\n    searchField: '',\r\n}\r\n\r\ninterface ISearchAction {\r\n    type?: string,\r\n    payload?: string\r\n}\r\n\r\nexport const searchRobots = (state: ISearchState = initialStateSearch, action: ISearchAction = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ninterface IRequestState {\r\n    isPending: boolean,\r\n    robots: IRobot[],\r\n    error: string\r\n}\r\n\r\nconst initialStateRobots: IRequestState = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\ninterface IRequestAction {\r\n    type?: string,\r\n    payload?: string\r\n}\r\n\r\nexport const requestRobots = (state: IRequestState = initialStateRobots, action: IRequestAction = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {isPending: false, robots: action.payload})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {isPending: false, error: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\n\r\nconst Header: React.FC = () =>{\r\n\r\n    return (\r\n        <h1 className=\"f2\">RoboFriends</h1>\r\n    );\r\n}\r\n\r\nexport default React.memo(Header)\r\n","import React, {ChangeEvent} from 'react'\r\n\r\nexport type ISearchCallback =  (event: ChangeEvent<HTMLInputElement>) => void;\r\n\r\nconst SearchBox: React.FC<{searchChange:ISearchCallback}> = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n                   aria-label=\"Search Robots\"\r\n                   type=\"search\"\r\n                   onChange={searchChange}\r\n                   placeholder=\"search robots \"/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default React.memo(SearchBox);\r\n","import * as React from 'react'\r\n\r\ninterface IScrollProps {\r\n    children?: JSX.Element\r\n}\r\n\r\nconst Scroll: React.FC<IScrollProps> = ({children}) =>{\r\n\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '700px'}}>\r\n            {children}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Scroll\r\n","import React, {Component, ErrorInfo} from 'react'\r\n\r\ninterface IAppProps {\r\n    children: JSX.Element\r\n}\r\n\r\ninterface IAppState {\r\n    hasError: boolean\r\n}\r\n\r\nclass ErrorBoundry extends Component<IAppProps, IAppState> {\r\n\r\n    constructor(props: IAppProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        return this.state.hasError ?\r\n            <h1>Oooops. Something went wrong</h1> :\r\n            this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry\r\n\r\n","import React from 'react'\r\nimport {IRobot} from \"../../containers/App/App\";\r\n\r\nconst Card: React.FC<IRobot> = ({id, name, email}) => {\r\n\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default React.memo(Card);\r\n","import React from 'react';\r\nimport Card from '../card/Card'\r\nimport {IRobot} from \"../../containers/App/App\";\r\n\r\n\r\nconst CardList: React.FC<{ robots: IRobot[] }> = ({robots}) => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                robots.map((robot: IRobot) => <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>)\r\n            }\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default CardList;\r\n","import React from 'react'\r\nimport Header from \"../Header\";\r\nimport SearchBox, {ISearchCallback} from \"../SearchBox/SearchBox\";\r\nimport Scroll from \"../Scroll/Scroll\";\r\nimport ErrorBoundry from \"../ErrorBoundry\";\r\nimport CardList from \"../CardList/CardList\";\r\n\r\nimport './MainPage.css'\r\nimport {IRobot} from \"../../containers/App/App\";\r\n\r\ninterface IProps {\r\n    searchChange: ISearchCallback,\r\n    robots:  IRobot[]\r\n}\r\n\r\n\r\nconst MainPage : React.FC<IProps> = (props) => {\r\n\r\n    return (\r\n        <div className=\"tc\">\r\n            <Header/>\r\n            <SearchBox searchChange={ props.searchChange }/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots={ props.robots }/>\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default MainPage;\r\n","// import React from \"react\";\r\nimport React, {useState, useEffect, ChangeEvent} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n// import {connect} from 'react-redux'\r\nimport {setSearchField, requestRobots} from \"../../actions\";\r\nimport MainPage from \"../../components/MainPage/MainPage\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppState} from \"../../index\";\r\n// import Card from \"../../components/card/Card\";\r\n\r\n/**\r\n * App Container With local state - function syntax\r\n * @param props\r\n */\r\n\r\n// const App =  (props)  => {\r\n//\r\n//     const [robots, setRobots] = useState([])\r\n//     const [searchField, setSearchField] = useState('')\r\n//\r\n//     useEffect(() => {\r\n//         fetch('https://jsonplaceholder.typicode.com/users')\r\n//             .then(response => response.json())\r\n//             .then(users => setRobots(users));\r\n//     }, [])\r\n//\r\n//     function onSearchChange({target: {value}}) {\r\n//         setSearchField(value)\r\n//     }\r\n//\r\n//     if (!robots.length) {\r\n//         return (<h1>Loading...</h1>);\r\n//     }\r\n//\r\n//     const filterRobots = robots.filter(robot => {\r\n//         return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n//     })\r\n//\r\n//     return (\r\n//      <MainPage searchChange={onSearchChange} robots={ filterRobots } />\r\n//     );\r\n// }\r\n\r\n\r\n/**\r\n * App container with redux store - function syntax\r\n * @param state\r\n */\r\n\r\nexport interface IRobot {\r\n    id: number,\r\n    name: string,\r\n    email: string\r\n}\r\n\r\nconst App : React.FC = () => {\r\n\r\n    const robosUsers: IRobot[] = useSelector((state: AppState) => state.requestRobots.robots)\r\n    const isPending = useSelector((state: AppState) => state.requestRobots.isPending)\r\n    const text = useSelector((state: AppState) => state.searchRobots.searchField)\r\n    const dispatch : Dispatch<any>  = useDispatch();\r\n    const [searchResults, setSearchResults] = useState<IRobot[]>([]);\r\n\r\n\r\n\r\n    const onSearchChange = (e: ChangeEvent<HTMLInputElement>) :void  => {\r\n        dispatch(setSearchField(e.target.value))\r\n    };\r\n\r\n    useEffect(() :void => {\r\n        dispatch(requestRobots());\r\n    }, [dispatch])\r\n\r\n    useEffect(() :void => {\r\n\r\n        const filteredRobots: IRobot[] = robosUsers.length ?\r\n            robosUsers.filter((robot: IRobot) => robot.name.toLowerCase().includes(text.toLowerCase())) :\r\n            [];\r\n\r\n        setSearchResults(filteredRobots);\r\n    }, [text, robosUsers])\r\n\r\n    if (isPending || !searchResults) {\r\n        return (<h1>Loading...</h1>);\r\n    }\r\n\r\n    return (\r\n        <MainPage searchChange={onSearchChange} robots={searchResults}/>\r\n    );\r\n}\r\nexport default App;\r\n\r\n\r\n/**\r\n * App container With redux store - class syntax\r\n * @param state\r\n */\r\n// const mapStateToProps = state => ({\r\n//     searchField: state.searchRobots.searchField,\r\n//     robots: state.requestRobots.robots,\r\n//     isPending: state.requestRobots.isPending,\r\n//     error: state.requestRobots.error,\r\n// })\r\n//\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n//         onRequestRobots: () => dispatch(requestRobots())\r\n//     }\r\n// }\r\n//\r\n// class App extends React.Component {\r\n//\r\n//\r\n//     componentWillMount = async () => {\r\n//         // fetch('https://jsonplaceholder.typicode.com/users')\r\n//         //     .then(response => response.json())\r\n//         //     .then(users => this.setState({robots: users}));\r\n//         this.props.onRequestRobots()\r\n//     }\r\n//\r\n//     // onSearchChange = ({target: {value}}) => {\r\n//     //     this.setState({\r\n//     //         searchField: value\r\n//     //     });\r\n//     // }\r\n\r\n//     filterRobots(robots, searchField) {\r\n//         return robots.filter(robot => {\r\n//             return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n//         })\r\n//     }\r\n//\r\n//     render() {\r\n//\r\n//         const {searchField,robots, isPending, onSearchChange} = this.props;\r\n//\r\n//         if ( isPending || !robots.length) {\r\n//             return (<h1>Loading...</h1>);\r\n//         }\r\n//\r\n//         const filteredRobots = this.filterRobots(robots, searchField);\r\n//\r\n//         return (\r\n//              <MainPage searchChange={onSearchChange} robots={ filteredRobots } />\r\n//         );\r\n//\r\n//     }\r\n//\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const setSearchField = (text:string)  => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch : Dispatch<any> ) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers, compose} from \"redux\";\nimport {createLogger} from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk'\nimport {searchRobots, requestRobots} from \"./reducers\";\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './containers/App/App'\nimport 'tachyons';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst logger = createLogger();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst enhancer = composeEnhancers(\n    applyMiddleware(thunkMiddleware, logger),\n    // other store enhancers if any\n);\n\n// const store = createStore(searchRobots,applyMiddleware(logger))\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, enhancer)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nexport type AppState = ReturnType<typeof rootReducer>;\n"],"sourceRoot":""}