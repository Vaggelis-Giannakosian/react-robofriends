{"version":3,"sources":["constants.js","reducers.js","reportWebVitals.js","components/card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App/App.js","actions.js","serviceWorkerRegistration.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","src","alt","React","memo","CardList","map","robot","SearchBox","searchChange","aria-label","type","onChange","placeholder","Scroll","style","overflowY","border","height","this","props","children","Component","ErrorBoundry","state","hasError","errorInfo","setState","Header","App","robosUsers","useSelector","requestRobots","text","searchRobots","dispatch","useDispatch","useState","searchResults","setSearchResults","useEffect","fetch","response","json","data","payload","catch","filteredRobots","length","filter","toLowerCase","includes","e","setSearchField","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","compose","applyMiddleware","thunkMiddleware","rootReducer","combineReducers","action","Object","assign","store","createStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f71ae6fb.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {isPending: false, robots: action.payload})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {isPending: false, error:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n\n\n","import React from 'react'\r\n\r\nconst Card = ({id, name, email}) => {\r\n\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default React.memo(Card);","import React from 'react';\r\nimport Card from '../card/Card'\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                robots.map(robot => <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>)\r\n            }\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n                   aria-label=\"Search Robots\"\r\n                   type=\"search\"\r\n                   onChange={searchChange}\r\n                   placeholder=\"search robots \"/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default React.memo(SearchBox);","import {Component} from 'react'\r\n\r\nclass Scroll extends Component{\r\n\r\n    render() {\r\n        return (\r\n            <div style={{overflowY:'scroll',border:'1px solid black', height:'700px'}}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            hasError:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError)\r\n        {\r\n            return <h1>Oooops. Something went wrong</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry\r\n\r\n","import React from 'react'\r\n\r\n\r\nconst Header = () =>{\r\n\r\n    return (\r\n        <h1 className=\"f2\">RoboFriends</h1>\r\n    );\r\n}\r\n\r\nexport default React.memo(Header)","// import React from \"react\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// import {connect} from 'react-redux'\r\nimport CardList from \"../../components/CardList/CardList\";\r\nimport SearchBox from \"../../components/SearchBox/SearchBox\";\r\nimport Scroll from '../../components/Scroll/Scroll'\r\nimport ErrorBoundry from '../../components/ErrorBoundry'\r\nimport Header from '../../components/Header'\r\nimport './App.css'\r\nimport {setSearchField, requestRobots} from \"../../actions\";\r\n\r\n\r\n/**\r\n * App Container With local state - function syntax\r\n * @param props\r\n */\r\n\r\n// const App =  (props)  => {\r\n//\r\n//     const [robots, setRobots] = useState([])\r\n//     const [searchField, setSearchField] = useState('')\r\n//\r\n//     useEffect(() => {\r\n//         fetch('https://jsonplaceholder.typicode.com/users')\r\n//             .then(response => response.json())\r\n//             .then(users => setRobots(users));\r\n//     }, [])\r\n//\r\n//     function onSearchChange({target: {value}}) {\r\n//         setSearchField(value)\r\n//     }\r\n//\r\n//     if (!robots.length) {\r\n//         return (<h1>Loading...</h1>);\r\n//     }\r\n//\r\n//     const filterRobots = robots.filter(robot => {\r\n//         return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n//     })\r\n//\r\n//     return (\r\n//         <div className=\"tc\">\r\n//             <h1 className=\"f1\">RoboFriends</h1>\r\n//             <SearchBox searchChange={onSearchChange}/>\r\n//             <Scroll>\r\n//                 <ErrorBoundry>\r\n//                     <CardList robots={filterRobots}/>\r\n//                 </ErrorBoundry>\r\n//             </Scroll>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n/**\r\n * App container with redux store - function syntax\r\n * @param state\r\n */\r\n\r\nconst App = () =>{\r\n\r\n    const robosUsers = useSelector(state => state.requestRobots.robots)\r\n    const isPending = useSelector(state => state.requestRobots.isPending)\r\n    const text = useSelector(state => state.searchRobots.searchField)\r\n    const dispatch = useDispatch();\r\n    const [searchResults, setSearchResults] = useState(null);\r\n\r\n    const onSearchChange = (e) => {\r\n        dispatch(setSearchField(e.target.value))\r\n    };\r\n\r\n    useEffect(() =>  {\r\n        dispatch(requestRobots());\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n\r\n        const filteredRobots = robosUsers.length ?\r\n            robosUsers.filter(robot =>  robot.name.toLowerCase().includes(text.toLowerCase())) :\r\n            [];\r\n\r\n        setSearchResults(filteredRobots);\r\n    }, [text,robosUsers])\r\n\r\n    if ( isPending || !searchResults) {\r\n        return (<h1>Loading...</h1>);\r\n    }\r\n\r\n    return(\r\n        <div className=\"tc\">\r\n            <Header></Header>\r\n            <SearchBox searchChange={ onSearchChange }/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots={ searchResults }/>\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n\r\n\r\n/**\r\n * App container With redux store - class syntax\r\n * @param state\r\n */\r\n// const mapStateToProps = state => ({\r\n//     searchField: state.searchRobots.searchField,\r\n//     robots: state.requestRobots.robots,\r\n//     isPending: state.requestRobots.isPending,\r\n//     error: state.requestRobots.error,\r\n// })\r\n//\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n//         onRequestRobots: () => dispatch(requestRobots())\r\n//     }\r\n// }\r\n//\r\n// class App extends React.Component {\r\n//\r\n//\r\n//     componentWillMount = async () => {\r\n//         // fetch('https://jsonplaceholder.typicode.com/users')\r\n//         //     .then(response => response.json())\r\n//         //     .then(users => this.setState({robots: users}));\r\n//         this.props.onRequestRobots()\r\n//     }\r\n//\r\n//     // onSearchChange = ({target: {value}}) => {\r\n//     //     this.setState({\r\n//     //         searchField: value\r\n//     //     });\r\n//     // }\r\n\r\n//     filterRobots(robots, searchField) {\r\n//         return robots.filter(robot => {\r\n//             return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n//         })\r\n//     }\r\n//\r\n//     render() {\r\n//\r\n//         const {searchField,robots, isPending, onSearchChange} = this.props;\r\n//\r\n//         if ( isPending || !robots.length) {\r\n//             return (<h1>Loading...</h1>);\r\n//         }\r\n//\r\n//         const filteredRobots = this.filterRobots(robots, searchField);\r\n//\r\n//         return (\r\n//             <div className=\"tc\">\r\n//                 <h1 className=\"f1\">RoboFriends</h1>\r\n//                 <SearchBox searchChange={onSearchChange}/>\r\n//                 <Scroll>\r\n//                     <ErrorBoundry>\r\n//                         <CardList robots={filteredRobots}/>\r\n//                     </ErrorBoundry>\r\n//                 </Scroll>\r\n//             </div>\r\n//         );\r\n//\r\n//     }\r\n//\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers, compose} from \"redux\";\nimport {createLogger} from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk'\nimport {searchRobots, requestRobots} from \"./reducers\";\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './containers/App/App'\nimport 'tachyons';\nimport * as serviceWorker from \"./serviceWorkerRegistration\";\n\n\nconst logger = createLogger();\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n        trace: true\n    }) : compose;\n\nconst enhancer = composeEnhancers(\n    applyMiddleware(thunkMiddleware, logger),\n    // other store enhancers if any\n);\n\n// const store = createStore(searchRobots,applyMiddleware(logger))\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, enhancer)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nserviceWorker.register();"],"sourceRoot":""}